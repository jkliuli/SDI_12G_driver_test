-- sdi_tx_sys.vhd

-- Generated using ACDS version 22.2 94

library IEEE;
library sdi_tx_sys_tx_core_rst;
library sdi_tx_sys_tx_phy;
library sdi_tx_sys_tx_phy_reset;
library sdi_tx_sys_tx_phy_reset_0;
library sdi_tx_sys_tx_phy_rst_ctrl;
library sdi_tx_sys_tx_phy_rst_ctrl_clk;
library sdi_tx_sys_tx_sdi;
library sdi_tx_sys_tx_sdi_clkout;
library altera_reset_controller_1921;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sdi_tx_sys is
	port (
		tx_core_rst_in_reset_reset                  : in  std_logic                      := '0';             --          tx_core_rst_in_reset.reset
		tx_phy_tx_cal_busy_tx_cal_busy              : out std_logic_vector(0 downto 0);                      --            tx_phy_tx_cal_busy.tx_cal_busy
		tx_phy_tx_serial_clk0_clk                   : in  std_logic_vector(0 downto 0)   := (others => '0'); --         tx_phy_tx_serial_clk0.clk
		tx_phy_tx_serial_data_tx_serial_data        : out std_logic_vector(0 downto 0);                      --         tx_phy_tx_serial_data.tx_serial_data
		tx_phy_tx_clkout_clk                        : out std_logic_vector(0 downto 0);                      --              tx_phy_tx_clkout.clk
		tx_phy_tx_parallel_data_tx_parallel_data    : in  std_logic_vector(127 downto 0) := (others => '0'); --       tx_phy_tx_parallel_data.tx_parallel_data
		tx_phy_tx_control_tx_control                : in  std_logic_vector(17 downto 0)  := (others => '0'); --             tx_phy_tx_control.tx_control
		tx_phy_tx_enh_data_valid_tx_enh_data_valid  : in  std_logic_vector(0 downto 0)   := (others => '0'); --      tx_phy_tx_enh_data_valid.tx_enh_data_valid
		tx_phy_reset_in_reset_reset                 : in  std_logic                      := '0';             --         tx_phy_reset_in_reset.reset
		tx_phy_rst_ctrl_pll_powerdown_pll_powerdown : out std_logic_vector(0 downto 0);                      -- tx_phy_rst_ctrl_pll_powerdown.pll_powerdown
		tx_phy_rst_ctrl_tx_ready_tx_ready           : out std_logic_vector(0 downto 0);                      --      tx_phy_rst_ctrl_tx_ready.tx_ready
		tx_phy_rst_ctrl_pll_locked_pll_locked       : in  std_logic_vector(0 downto 0)   := (others => '0'); --    tx_phy_rst_ctrl_pll_locked.pll_locked
		tx_phy_rst_ctrl_pll_select_pll_select       : in  std_logic_vector(0 downto 0)   := (others => '0'); --    tx_phy_rst_ctrl_pll_select.pll_select
		tx_phy_rst_ctrl_tx_cal_busy_tx_cal_busy     : in  std_logic_vector(0 downto 0)   := (others => '0'); --   tx_phy_rst_ctrl_tx_cal_busy.tx_cal_busy
		tx_phy_rst_ctrl_clk_in_clk_clk              : in  std_logic                      := '0';             --    tx_phy_rst_ctrl_clk_in_clk.clk
		tx_sdi_tx_datain_valid_export               : in  std_logic                      := '0';             --        tx_sdi_tx_datain_valid.export
		tx_sdi_tx_trs_export                        : in  std_logic                      := '0';             --                 tx_sdi_tx_trs.export
		tx_sdi_tx_std_export                        : in  std_logic_vector(2 downto 0)   := (others => '0'); --                 tx_sdi_tx_std.export
		tx_sdi_tx_enable_ln_export                  : in  std_logic                      := '0';             --           tx_sdi_tx_enable_ln.export
		tx_sdi_tx_enable_crc_export                 : in  std_logic                      := '0';             --          tx_sdi_tx_enable_crc.export
		tx_sdi_tx_datain_export                     : in  std_logic_vector(79 downto 0)  := (others => '0'); --              tx_sdi_tx_datain.export
		tx_sdi_tx_ln_export                         : in  std_logic_vector(43 downto 0)  := (others => '0'); --                  tx_sdi_tx_ln.export
		tx_sdi_tx_ln_b_export                       : in  std_logic_vector(43 downto 0)  := (others => '0'); --                tx_sdi_tx_ln_b.export
		tx_sdi_tx_dataout_valid_export              : out std_logic;                                         --       tx_sdi_tx_dataout_valid.export
		tx_sdi_tx_dataout_tx_parallel_data          : out std_logic_vector(79 downto 0);                     --             tx_sdi_tx_dataout.tx_parallel_data
		tx_sdi_clkout_out_clk_clk                   : out std_logic                                          --         tx_sdi_clkout_out_clk.clk
	);
end entity sdi_tx_sys;

architecture rtl of sdi_tx_sys is
	component sdi_tx_sys_tx_core_rst_cmp is
		port (
			in_reset  : in  std_logic := 'X'; -- reset
			out_reset : out std_logic         -- reset
		);
	end component sdi_tx_sys_tx_core_rst_cmp;

	component sdi_tx_sys_tx_phy_cmp is
		port (
			tx_analogreset    : in  std_logic_vector(0 downto 0)   := (others => 'X'); -- tx_analogreset
			tx_digitalreset   : in  std_logic_vector(0 downto 0)   := (others => 'X'); -- tx_digitalreset
			tx_cal_busy       : out std_logic_vector(0 downto 0);                      -- tx_cal_busy
			tx_serial_clk0    : in  std_logic_vector(0 downto 0)   := (others => 'X'); -- clk
			tx_serial_data    : out std_logic_vector(0 downto 0);                      -- tx_serial_data
			tx_coreclkin      : in  std_logic_vector(0 downto 0)   := (others => 'X'); -- clk
			tx_clkout         : out std_logic_vector(0 downto 0);                      -- clk
			tx_pma_div_clkout : out std_logic_vector(0 downto 0);                      -- clk
			tx_parallel_data  : in  std_logic_vector(127 downto 0) := (others => 'X'); -- tx_parallel_data
			tx_control        : in  std_logic_vector(17 downto 0)  := (others => 'X'); -- tx_control
			tx_enh_data_valid : in  std_logic_vector(0 downto 0)   := (others => 'X')  -- tx_enh_data_valid
		);
	end component sdi_tx_sys_tx_phy_cmp;

	component sdi_tx_sys_tx_phy_reset_cmp is
		port (
			in_reset  : in  std_logic := 'X'; -- reset
			out_reset : out std_logic         -- reset
		);
	end component sdi_tx_sys_tx_phy_reset_cmp;

	component sdi_tx_sys_tx_phy_reset_0_cmp is
		port (
			clk       : in  std_logic := 'X'; -- clk
			in_reset  : in  std_logic := 'X'; -- reset
			out_reset : out std_logic         -- reset
		);
	end component sdi_tx_sys_tx_phy_reset_0_cmp;

	component sdi_tx_sys_tx_phy_rst_ctrl_cmp is
		port (
			clock           : in  std_logic                    := 'X';             -- clk
			reset           : in  std_logic                    := 'X';             -- reset
			pll_powerdown   : out std_logic_vector(0 downto 0);                    -- pll_powerdown
			tx_analogreset  : out std_logic_vector(0 downto 0);                    -- tx_analogreset
			tx_digitalreset : out std_logic_vector(0 downto 0);                    -- tx_digitalreset
			tx_ready        : out std_logic_vector(0 downto 0);                    -- tx_ready
			pll_locked      : in  std_logic_vector(0 downto 0) := (others => 'X'); -- pll_locked
			pll_select      : in  std_logic_vector(0 downto 0) := (others => 'X'); -- pll_select
			tx_cal_busy     : in  std_logic_vector(0 downto 0) := (others => 'X')  -- tx_cal_busy
		);
	end component sdi_tx_sys_tx_phy_rst_ctrl_cmp;

	component sdi_tx_sys_tx_phy_rst_ctrl_clk_cmp is
		port (
			in_clk  : in  std_logic := 'X'; -- clk
			out_clk : out std_logic         -- clk
		);
	end component sdi_tx_sys_tx_phy_rst_ctrl_clk_cmp;

	component sdi_tx_sys_tx_sdi_cmp is
		port (
			tx_rst           : in  std_logic                     := 'X';             -- reset
			tx_datain_valid  : in  std_logic                     := 'X';             -- export
			tx_trs           : in  std_logic                     := 'X';             -- export
			tx_std           : in  std_logic_vector(2 downto 0)  := (others => 'X'); -- export
			tx_enable_ln     : in  std_logic                     := 'X';             -- export
			tx_enable_crc    : in  std_logic                     := 'X';             -- export
			tx_datain        : in  std_logic_vector(79 downto 0) := (others => 'X'); -- export
			tx_ln            : in  std_logic_vector(43 downto 0) := (others => 'X'); -- export
			tx_ln_b          : in  std_logic_vector(43 downto 0) := (others => 'X'); -- export
			tx_dataout_valid : out std_logic;                                        -- export
			tx_dataout       : out std_logic_vector(79 downto 0);                    -- tx_parallel_data
			tx_pclk          : in  std_logic                     := 'X'              -- clk
		);
	end component sdi_tx_sys_tx_sdi_cmp;

	component sdi_tx_sys_tx_sdi_clkout_cmp is
		port (
			in_clk  : in  std_logic := 'X'; -- clk
			out_clk : out std_logic         -- clk
		);
	end component sdi_tx_sys_tx_sdi_clkout_cmp;

	component altera_reset_controller_cmp is
		generic (
			NUM_RESET_INPUTS          : integer := 6;
			OUTPUT_RESET_SYNC_EDGES   : string  := "deassert";
			SYNC_DEPTH                : integer := 2;
			RESET_REQUEST_PRESENT     : integer := 0;
			RESET_REQ_WAIT_TIME       : integer := 1;
			MIN_RST_ASSERTION_TIME    : integer := 3;
			RESET_REQ_EARLY_DSRT_TIME : integer := 1;
			USE_RESET_REQUEST_IN0     : integer := 0;
			USE_RESET_REQUEST_IN1     : integer := 0;
			USE_RESET_REQUEST_IN2     : integer := 0;
			USE_RESET_REQUEST_IN3     : integer := 0;
			USE_RESET_REQUEST_IN4     : integer := 0;
			USE_RESET_REQUEST_IN5     : integer := 0;
			USE_RESET_REQUEST_IN6     : integer := 0;
			USE_RESET_REQUEST_IN7     : integer := 0;
			USE_RESET_REQUEST_IN8     : integer := 0;
			USE_RESET_REQUEST_IN9     : integer := 0;
			USE_RESET_REQUEST_IN10    : integer := 0;
			USE_RESET_REQUEST_IN11    : integer := 0;
			USE_RESET_REQUEST_IN12    : integer := 0;
			USE_RESET_REQUEST_IN13    : integer := 0;
			USE_RESET_REQUEST_IN14    : integer := 0;
			USE_RESET_REQUEST_IN15    : integer := 0;
			ADAPT_RESET_REQUEST       : integer := 0
		);
		port (
			reset_in0      : in  std_logic := 'X'; -- reset
			clk            : in  std_logic := 'X'; -- clk
			reset_out      : out std_logic;        -- reset
			reset_req      : out std_logic;        -- reset_req
			reset_req_in0  : in  std_logic := 'X'; -- reset_req
			reset_in1      : in  std_logic := 'X'; -- reset
			reset_req_in1  : in  std_logic := 'X'; -- reset_req
			reset_in2      : in  std_logic := 'X'; -- reset
			reset_req_in2  : in  std_logic := 'X'; -- reset_req
			reset_in3      : in  std_logic := 'X'; -- reset
			reset_req_in3  : in  std_logic := 'X'; -- reset_req
			reset_in4      : in  std_logic := 'X'; -- reset
			reset_req_in4  : in  std_logic := 'X'; -- reset_req
			reset_in5      : in  std_logic := 'X'; -- reset
			reset_req_in5  : in  std_logic := 'X'; -- reset_req
			reset_in6      : in  std_logic := 'X'; -- reset
			reset_req_in6  : in  std_logic := 'X'; -- reset_req
			reset_in7      : in  std_logic := 'X'; -- reset
			reset_req_in7  : in  std_logic := 'X'; -- reset_req
			reset_in8      : in  std_logic := 'X'; -- reset
			reset_req_in8  : in  std_logic := 'X'; -- reset_req
			reset_in9      : in  std_logic := 'X'; -- reset
			reset_req_in9  : in  std_logic := 'X'; -- reset_req
			reset_in10     : in  std_logic := 'X'; -- reset
			reset_req_in10 : in  std_logic := 'X'; -- reset_req
			reset_in11     : in  std_logic := 'X'; -- reset
			reset_req_in11 : in  std_logic := 'X'; -- reset_req
			reset_in12     : in  std_logic := 'X'; -- reset
			reset_req_in12 : in  std_logic := 'X'; -- reset_req
			reset_in13     : in  std_logic := 'X'; -- reset
			reset_req_in13 : in  std_logic := 'X'; -- reset_req
			reset_in14     : in  std_logic := 'X'; -- reset
			reset_req_in14 : in  std_logic := 'X'; -- reset_req
			reset_in15     : in  std_logic := 'X'; -- reset
			reset_req_in15 : in  std_logic := 'X'  -- reset_req
		);
	end component altera_reset_controller_cmp;

	signal tx_phy_rst_ctrl_clk_out_clk_clk                 : std_logic;                    -- tx_phy_rst_ctrl_clk:out_clk -> [rst_controller:clk, tx_phy_reset_0:clk, tx_phy_rst_ctrl:clock]
	signal tx_phy_tx_pma_div_clkout_clk                    : std_logic_vector(0 downto 0); -- tx_phy:tx_pma_div_clkout -> [tx_phy:tx_coreclkin, tx_sdi:tx_pclk, tx_sdi_clkout:in_clk]
	signal tx_phy_rst_ctrl_tx_analogreset_tx_analogreset   : std_logic_vector(0 downto 0); -- tx_phy_rst_ctrl:tx_analogreset -> tx_phy:tx_analogreset
	signal tx_phy_rst_ctrl_tx_digitalreset_tx_digitalreset : std_logic_vector(0 downto 0); -- tx_phy_rst_ctrl:tx_digitalreset -> tx_phy:tx_digitalreset
	signal tx_phy_reset_0_out_reset_reset                  : std_logic;                    -- tx_phy_reset_0:out_reset -> tx_phy_rst_ctrl:reset
	signal tx_core_rst_out_reset_reset                     : std_logic;                    -- tx_core_rst:out_reset -> tx_sdi:tx_rst
	signal rst_controller_reset_out_reset                  : std_logic;                    -- rst_controller:reset_out -> tx_phy_reset_0:in_reset
	signal tx_phy_reset_out_reset_reset                    : std_logic;                    -- tx_phy_reset:out_reset -> rst_controller:reset_in0

	for tx_core_rst : sdi_tx_sys_tx_core_rst_cmp
		use entity sdi_tx_sys_tx_core_rst.sdi_tx_sys_tx_core_rst;
	for tx_phy : sdi_tx_sys_tx_phy_cmp
		use entity sdi_tx_sys_tx_phy.sdi_tx_sys_tx_phy;
	for tx_phy_reset : sdi_tx_sys_tx_phy_reset_cmp
		use entity sdi_tx_sys_tx_phy_reset.sdi_tx_sys_tx_phy_reset;
	for tx_phy_reset_0 : sdi_tx_sys_tx_phy_reset_0_cmp
		use entity sdi_tx_sys_tx_phy_reset_0.sdi_tx_sys_tx_phy_reset_0;
	for tx_phy_rst_ctrl : sdi_tx_sys_tx_phy_rst_ctrl_cmp
		use entity sdi_tx_sys_tx_phy_rst_ctrl.sdi_tx_sys_tx_phy_rst_ctrl;
	for tx_phy_rst_ctrl_clk : sdi_tx_sys_tx_phy_rst_ctrl_clk_cmp
		use entity sdi_tx_sys_tx_phy_rst_ctrl_clk.sdi_tx_sys_tx_phy_rst_ctrl_clk;
	for tx_sdi : sdi_tx_sys_tx_sdi_cmp
		use entity sdi_tx_sys_tx_sdi.sdi_tx_sys_tx_sdi;
	for tx_sdi_clkout : sdi_tx_sys_tx_sdi_clkout_cmp
		use entity sdi_tx_sys_tx_sdi_clkout.sdi_tx_sys_tx_sdi_clkout;
	for rst_controller : altera_reset_controller_cmp
		use entity altera_reset_controller_1921.altera_reset_controller;
begin

	tx_core_rst : component sdi_tx_sys_tx_core_rst_cmp
		port map (
			in_reset  => tx_core_rst_in_reset_reset,  --  in_reset.reset
			out_reset => tx_core_rst_out_reset_reset  -- out_reset.reset
		);

	tx_phy : component sdi_tx_sys_tx_phy_cmp
		port map (
			tx_analogreset    => tx_phy_rst_ctrl_tx_analogreset_tx_analogreset,   --    tx_analogreset.tx_analogreset
			tx_digitalreset   => tx_phy_rst_ctrl_tx_digitalreset_tx_digitalreset, --   tx_digitalreset.tx_digitalreset
			tx_cal_busy       => tx_phy_tx_cal_busy_tx_cal_busy,                  --       tx_cal_busy.tx_cal_busy
			tx_serial_clk0    => tx_phy_tx_serial_clk0_clk,                       --    tx_serial_clk0.clk
			tx_serial_data    => tx_phy_tx_serial_data_tx_serial_data,            --    tx_serial_data.tx_serial_data
			tx_coreclkin      => tx_phy_tx_pma_div_clkout_clk,                    --      tx_coreclkin.clk
			tx_clkout         => tx_phy_tx_clkout_clk,                            --         tx_clkout.clk
			tx_pma_div_clkout => tx_phy_tx_pma_div_clkout_clk,                    -- tx_pma_div_clkout.clk
			tx_parallel_data  => tx_phy_tx_parallel_data_tx_parallel_data,        --  tx_parallel_data.tx_parallel_data
			tx_control        => tx_phy_tx_control_tx_control,                    --        tx_control.tx_control
			tx_enh_data_valid => tx_phy_tx_enh_data_valid_tx_enh_data_valid       -- tx_enh_data_valid.tx_enh_data_valid
		);

	tx_phy_reset : component sdi_tx_sys_tx_phy_reset_cmp
		port map (
			in_reset  => tx_phy_reset_in_reset_reset,  --  in_reset.reset
			out_reset => tx_phy_reset_out_reset_reset  -- out_reset.reset
		);

	tx_phy_reset_0 : component sdi_tx_sys_tx_phy_reset_0_cmp
		port map (
			clk       => tx_phy_rst_ctrl_clk_out_clk_clk, --       clk.clk
			in_reset  => rst_controller_reset_out_reset,  --  in_reset.reset
			out_reset => tx_phy_reset_0_out_reset_reset   -- out_reset.reset
		);

	tx_phy_rst_ctrl : component sdi_tx_sys_tx_phy_rst_ctrl_cmp
		port map (
			clock           => tx_phy_rst_ctrl_clk_out_clk_clk,                 --           clock.clk
			reset           => tx_phy_reset_0_out_reset_reset,                  --           reset.reset
			pll_powerdown   => tx_phy_rst_ctrl_pll_powerdown_pll_powerdown,     --   pll_powerdown.pll_powerdown
			tx_analogreset  => tx_phy_rst_ctrl_tx_analogreset_tx_analogreset,   --  tx_analogreset.tx_analogreset
			tx_digitalreset => tx_phy_rst_ctrl_tx_digitalreset_tx_digitalreset, -- tx_digitalreset.tx_digitalreset
			tx_ready        => tx_phy_rst_ctrl_tx_ready_tx_ready,               --        tx_ready.tx_ready
			pll_locked      => tx_phy_rst_ctrl_pll_locked_pll_locked,           --      pll_locked.pll_locked
			pll_select      => tx_phy_rst_ctrl_pll_select_pll_select,           --      pll_select.pll_select
			tx_cal_busy     => tx_phy_rst_ctrl_tx_cal_busy_tx_cal_busy          --     tx_cal_busy.tx_cal_busy
		);

	tx_phy_rst_ctrl_clk : component sdi_tx_sys_tx_phy_rst_ctrl_clk_cmp
		port map (
			in_clk  => tx_phy_rst_ctrl_clk_in_clk_clk,  --  in_clk.clk
			out_clk => tx_phy_rst_ctrl_clk_out_clk_clk  -- out_clk.clk
		);

	tx_sdi : component sdi_tx_sys_tx_sdi_cmp
		port map (
			tx_rst           => tx_core_rst_out_reset_reset,        --           tx_rst.reset
			tx_datain_valid  => tx_sdi_tx_datain_valid_export,      --  tx_datain_valid.export
			tx_trs           => tx_sdi_tx_trs_export,               --           tx_trs.export
			tx_std           => tx_sdi_tx_std_export,               --           tx_std.export
			tx_enable_ln     => tx_sdi_tx_enable_ln_export,         --     tx_enable_ln.export
			tx_enable_crc    => tx_sdi_tx_enable_crc_export,        --    tx_enable_crc.export
			tx_datain        => tx_sdi_tx_datain_export,            --        tx_datain.export
			tx_ln            => tx_sdi_tx_ln_export,                --            tx_ln.export
			tx_ln_b          => tx_sdi_tx_ln_b_export,              --          tx_ln_b.export
			tx_dataout_valid => tx_sdi_tx_dataout_valid_export,     -- tx_dataout_valid.export
			tx_dataout       => tx_sdi_tx_dataout_tx_parallel_data, --       tx_dataout.tx_parallel_data
			tx_pclk          => tx_phy_tx_pma_div_clkout_clk(0)     --          tx_pclk.clk
		);

	tx_sdi_clkout : component sdi_tx_sys_tx_sdi_clkout_cmp
		port map (
			in_clk  => tx_phy_tx_pma_div_clkout_clk(0), --  in_clk.clk
			out_clk => tx_sdi_clkout_out_clk_clk        -- out_clk.clk
		);

	rst_controller : component altera_reset_controller_cmp
		generic map (
			NUM_RESET_INPUTS          => 1,
			OUTPUT_RESET_SYNC_EDGES   => "deassert",
			SYNC_DEPTH                => 2,
			RESET_REQUEST_PRESENT     => 0,
			RESET_REQ_WAIT_TIME       => 1,
			MIN_RST_ASSERTION_TIME    => 3,
			RESET_REQ_EARLY_DSRT_TIME => 1,
			USE_RESET_REQUEST_IN0     => 0,
			USE_RESET_REQUEST_IN1     => 0,
			USE_RESET_REQUEST_IN2     => 0,
			USE_RESET_REQUEST_IN3     => 0,
			USE_RESET_REQUEST_IN4     => 0,
			USE_RESET_REQUEST_IN5     => 0,
			USE_RESET_REQUEST_IN6     => 0,
			USE_RESET_REQUEST_IN7     => 0,
			USE_RESET_REQUEST_IN8     => 0,
			USE_RESET_REQUEST_IN9     => 0,
			USE_RESET_REQUEST_IN10    => 0,
			USE_RESET_REQUEST_IN11    => 0,
			USE_RESET_REQUEST_IN12    => 0,
			USE_RESET_REQUEST_IN13    => 0,
			USE_RESET_REQUEST_IN14    => 0,
			USE_RESET_REQUEST_IN15    => 0,
			ADAPT_RESET_REQUEST       => 0
		)
		port map (
			reset_in0      => tx_phy_reset_out_reset_reset,    -- reset_in0.reset
			clk            => tx_phy_rst_ctrl_clk_out_clk_clk, --       clk.clk
			reset_out      => rst_controller_reset_out_reset,  -- reset_out.reset
			reset_req      => open,                            -- (terminated)
			reset_req_in0  => '0',                             -- (terminated)
			reset_in1      => '0',                             -- (terminated)
			reset_req_in1  => '0',                             -- (terminated)
			reset_in2      => '0',                             -- (terminated)
			reset_req_in2  => '0',                             -- (terminated)
			reset_in3      => '0',                             -- (terminated)
			reset_req_in3  => '0',                             -- (terminated)
			reset_in4      => '0',                             -- (terminated)
			reset_req_in4  => '0',                             -- (terminated)
			reset_in5      => '0',                             -- (terminated)
			reset_req_in5  => '0',                             -- (terminated)
			reset_in6      => '0',                             -- (terminated)
			reset_req_in6  => '0',                             -- (terminated)
			reset_in7      => '0',                             -- (terminated)
			reset_req_in7  => '0',                             -- (terminated)
			reset_in8      => '0',                             -- (terminated)
			reset_req_in8  => '0',                             -- (terminated)
			reset_in9      => '0',                             -- (terminated)
			reset_req_in9  => '0',                             -- (terminated)
			reset_in10     => '0',                             -- (terminated)
			reset_req_in10 => '0',                             -- (terminated)
			reset_in11     => '0',                             -- (terminated)
			reset_req_in11 => '0',                             -- (terminated)
			reset_in12     => '0',                             -- (terminated)
			reset_req_in12 => '0',                             -- (terminated)
			reset_in13     => '0',                             -- (terminated)
			reset_req_in13 => '0',                             -- (terminated)
			reset_in14     => '0',                             -- (terminated)
			reset_req_in14 => '0',                             -- (terminated)
			reset_in15     => '0',                             -- (terminated)
			reset_req_in15 => '0'                              -- (terminated)
		);

end architecture rtl; -- of sdi_tx_sys
