-- sdi_tx_sys_tx_sdi.vhd

-- Generated using ACDS version 22.2 94

library IEEE;
library sdi_ii_1930;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sdi_tx_sys_tx_sdi is
	port (
		tx_rst           : in  std_logic                     := '0';             --           tx_rst.reset
		tx_datain_valid  : in  std_logic                     := '0';             --  tx_datain_valid.export
		tx_trs           : in  std_logic                     := '0';             --           tx_trs.export
		tx_std           : in  std_logic_vector(2 downto 0)  := (others => '0'); --           tx_std.export
		tx_enable_ln     : in  std_logic                     := '0';             --     tx_enable_ln.export
		tx_enable_crc    : in  std_logic                     := '0';             --    tx_enable_crc.export
		tx_datain        : in  std_logic_vector(79 downto 0) := (others => '0'); --        tx_datain.export
		tx_ln            : in  std_logic_vector(43 downto 0) := (others => '0'); --            tx_ln.export
		tx_ln_b          : in  std_logic_vector(43 downto 0) := (others => '0'); --          tx_ln_b.export
		tx_dataout_valid : out std_logic;                                        -- tx_dataout_valid.export
		tx_dataout       : out std_logic_vector(79 downto 0);                    --       tx_dataout.tx_parallel_data
		tx_pclk          : in  std_logic                     := '0'              --          tx_pclk.clk
	);
end entity sdi_tx_sys_tx_sdi;

architecture rtl of sdi_tx_sys_tx_sdi is
	component sdi_tx_sys_tx_sdi_sdi_ii_1930_3m232fi_cmp is
		generic (
			FAMILY               : string  := "Arria 10";
			VIDEO_STANDARD       : string  := "hd";
			SD_BIT_WIDTH         : integer := 10;
			DIRECTION            : string  := "du";
			AXIS_VIDEOIF_EN      : integer := 0;
			RX_CORECLK_FREQ_HZ   : integer := 148500000;
			RX_INC_ERR_TOLERANCE : integer := 0;
			RX_CRC_ERROR_OUTPUT  : integer := 0;
			RX_EN_VPID_EXTRACT   : integer := 0;
			TX_EN_VPID_INSERT    : integer := 0
		);
		port (
			tx_rst           : in  std_logic                     := 'X';             -- reset
			tx_datain_valid  : in  std_logic                     := 'X';             -- export
			tx_trs           : in  std_logic                     := 'X';             -- export
			tx_std           : in  std_logic_vector(2 downto 0)  := (others => 'X'); -- export
			tx_enable_ln     : in  std_logic                     := 'X';             -- export
			tx_enable_crc    : in  std_logic                     := 'X';             -- export
			tx_datain        : in  std_logic_vector(79 downto 0) := (others => 'X'); -- export
			tx_ln            : in  std_logic_vector(43 downto 0) := (others => 'X'); -- export
			tx_ln_b          : in  std_logic_vector(43 downto 0) := (others => 'X'); -- export
			tx_dataout_valid : out std_logic;                                        -- export
			tx_dataout       : out std_logic_vector(79 downto 0);                    -- tx_parallel_data
			tx_pclk          : in  std_logic                     := 'X'              -- clk
		);
	end component sdi_tx_sys_tx_sdi_sdi_ii_1930_3m232fi_cmp;

	for tx_sdi : sdi_tx_sys_tx_sdi_sdi_ii_1930_3m232fi_cmp
		use entity sdi_ii_1930.sdi_tx_sys_tx_sdi_sdi_ii_1930_3m232fi;
begin

	tx_sdi : component sdi_tx_sys_tx_sdi_sdi_ii_1930_3m232fi_cmp
		generic map (
			FAMILY               => "Arria 10",
			VIDEO_STANDARD       => "mr",
			SD_BIT_WIDTH         => 10,
			DIRECTION            => "tx",
			AXIS_VIDEOIF_EN      => 0,
			RX_CORECLK_FREQ_HZ   => 148500000,
			RX_INC_ERR_TOLERANCE => 0,
			RX_CRC_ERROR_OUTPUT  => 0,
			RX_EN_VPID_EXTRACT   => 0,
			TX_EN_VPID_INSERT    => 0
		)
		port map (
			tx_rst           => tx_rst,           --           tx_rst.reset
			tx_datain_valid  => tx_datain_valid,  --  tx_datain_valid.export
			tx_trs           => tx_trs,           --           tx_trs.export
			tx_std           => tx_std,           --           tx_std.export
			tx_enable_ln     => tx_enable_ln,     --     tx_enable_ln.export
			tx_enable_crc    => tx_enable_crc,    --    tx_enable_crc.export
			tx_datain        => tx_datain,        --        tx_datain.export
			tx_ln            => tx_ln,            --            tx_ln.export
			tx_ln_b          => tx_ln_b,          --          tx_ln_b.export
			tx_dataout_valid => tx_dataout_valid, -- tx_dataout_valid.export
			tx_dataout       => tx_dataout,       --       tx_dataout.tx_parallel_data
			tx_pclk          => tx_pclk           --          tx_pclk.clk
		);

end architecture rtl; -- of sdi_tx_sys_tx_sdi
