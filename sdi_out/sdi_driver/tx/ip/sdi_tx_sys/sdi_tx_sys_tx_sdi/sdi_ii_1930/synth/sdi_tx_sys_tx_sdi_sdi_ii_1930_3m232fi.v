// sdi_tx_sys_tx_sdi_sdi_ii_1930_3m232fi.v

// This file was auto-generated from sdi_ii_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 22.2 94

`timescale 1 ps / 1 ps
module sdi_tx_sys_tx_sdi_sdi_ii_1930_3m232fi #(
		parameter FAMILY               = "Arria 10",
		parameter VIDEO_STANDARD       = "mr",
		parameter SD_BIT_WIDTH         = 10,
		parameter DIRECTION            = "tx",
		parameter AXIS_VIDEOIF_EN      = 0,
		parameter RX_CORECLK_FREQ_HZ   = 148500000,
		parameter RX_INC_ERR_TOLERANCE = 0,
		parameter RX_CRC_ERROR_OUTPUT  = 0,
		parameter RX_EN_VPID_EXTRACT   = 0,
		parameter TX_EN_VPID_INSERT    = 0
	) (
		input  wire        tx_rst,           //           tx_rst.reset
		input  wire        tx_datain_valid,  //  tx_datain_valid.export
		input  wire        tx_trs,           //           tx_trs.export
		input  wire [2:0]  tx_std,           //           tx_std.export
		input  wire        tx_enable_ln,     //     tx_enable_ln.export
		input  wire        tx_enable_crc,    //    tx_enable_crc.export
		input  wire [79:0] tx_datain,        //        tx_datain.export
		input  wire [43:0] tx_ln,            //            tx_ln.export
		input  wire [43:0] tx_ln_b,          //          tx_ln_b.export
		output wire        tx_dataout_valid, // tx_dataout_valid.export
		output wire [79:0] tx_dataout,       //       tx_dataout.tx_parallel_data
		input  wire        tx_pclk           //          tx_pclk.clk
	);

	wire   [2:0] u_tx_protocol_tx_std_out_export;           // u_tx_protocol:tx_std_out -> u_tx_phy_mgmt:tx_std
	wire  [79:0] u_tx_protocol_tx_dataout_tx_parallel_data; // u_tx_protocol:tx_dataout -> u_tx_phy_mgmt:tx_datain
	wire         u_tx_protocol_tx_dataout_valid_export;     // u_tx_protocol:tx_dataout_valid -> u_tx_phy_mgmt:tx_datain_valid
	wire         rst_controller_reset_out_reset;            // rst_controller:reset_out -> [u_tx_phy_mgmt:tx_rst, u_tx_protocol:tx_rst]

	generate
		// If any of the display statements (or deliberately broken
		// instantiations) within this generate block triggers then this module
		// has been instantiated this module with a set of parameters different
		// from those it was generated for.  This will usually result in a
		// non-functioning system.
		if (FAMILY != "Arria 10")
		begin
		// synthesis translate_off
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
		// synthesis translate_on
			instantiated_with_wrong_parameters_error_see_comment_above
					family_check ( .error(1'b1) );
		end
		if (VIDEO_STANDARD != "mr")
		begin
		// synthesis translate_off
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
		// synthesis translate_on
			instantiated_with_wrong_parameters_error_see_comment_above
					video_standard_check ( .error(1'b1) );
		end
		if (SD_BIT_WIDTH != 10)
		begin
		// synthesis translate_off
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
		// synthesis translate_on
			instantiated_with_wrong_parameters_error_see_comment_above
					sd_bit_width_check ( .error(1'b1) );
		end
		if (DIRECTION != "tx")
		begin
		// synthesis translate_off
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
		// synthesis translate_on
			instantiated_with_wrong_parameters_error_see_comment_above
					direction_check ( .error(1'b1) );
		end
		if (AXIS_VIDEOIF_EN != 0)
		begin
		// synthesis translate_off
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
		// synthesis translate_on
			instantiated_with_wrong_parameters_error_see_comment_above
					axis_videoif_en_check ( .error(1'b1) );
		end
		if (RX_CORECLK_FREQ_HZ != 148500000)
		begin
		// synthesis translate_off
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
		// synthesis translate_on
			instantiated_with_wrong_parameters_error_see_comment_above
					rx_coreclk_freq_hz_check ( .error(1'b1) );
		end
		if (RX_INC_ERR_TOLERANCE != 0)
		begin
		// synthesis translate_off
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
		// synthesis translate_on
			instantiated_with_wrong_parameters_error_see_comment_above
					rx_inc_err_tolerance_check ( .error(1'b1) );
		end
		if (RX_CRC_ERROR_OUTPUT != 0)
		begin
		// synthesis translate_off
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
		// synthesis translate_on
			instantiated_with_wrong_parameters_error_see_comment_above
					rx_crc_error_output_check ( .error(1'b1) );
		end
		if (RX_EN_VPID_EXTRACT != 0)
		begin
		// synthesis translate_off
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
		// synthesis translate_on
			instantiated_with_wrong_parameters_error_see_comment_above
					rx_en_vpid_extract_check ( .error(1'b1) );
		end
		if (TX_EN_VPID_INSERT != 0)
		begin
		// synthesis translate_off
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
		// synthesis translate_on
			instantiated_with_wrong_parameters_error_see_comment_above
					tx_en_vpid_insert_check ( .error(1'b1) );
		end
	endgenerate

	sdi_ii_tx_protocol #(
		.VIDEO_STANDARD    ("mr"),
		.SD_BIT_WIDTH      (10),
		.TX_EN_VPID_INSERT (0)
	) u_tx_protocol (
		.tx_pclk            (tx_pclk),                                          //   input,   width = 1,          tx_pclk.clk
		.tx_rst             (rst_controller_reset_out_reset),                   //   input,   width = 1,           tx_rst.reset
		.tx_datain_valid    (tx_datain_valid),                                  //   input,   width = 1,  tx_datain_valid.export
		.tx_trs             (tx_trs),                                           //   input,   width = 1,           tx_trs.export
		.tx_std             (tx_std),                                           //   input,   width = 3,           tx_std.export
		.tx_std_out         (u_tx_protocol_tx_std_out_export),                  //  output,   width = 3,       tx_std_out.export
		.tx_enable_ln       (tx_enable_ln),                                     //   input,   width = 1,     tx_enable_ln.export
		.tx_enable_crc      (tx_enable_crc),                                    //   input,   width = 1,    tx_enable_crc.export
		.tx_dataout_valid   (u_tx_protocol_tx_dataout_valid_export),            //  output,   width = 1, tx_dataout_valid.export
		.tx_datain          (tx_datain),                                        //   input,  width = 80,        tx_datain.export
		.tx_ln              (tx_ln),                                            //   input,  width = 44,            tx_ln.export
		.tx_ln_b            (tx_ln_b),                                          //   input,  width = 44,          tx_ln_b.export
		.tx_dataout         (u_tx_protocol_tx_dataout_tx_parallel_data),        //  output,  width = 80,       tx_dataout.tx_parallel_data
		.tx_vpid_overwrite  (1'b0),                                             // (terminated),                               
		.tx_datain_b        (20'b00000000000000000000),                         // (terminated),                               
		.tx_datain_valid_b  (1'b0),                                             // (terminated),                               
		.tx_trs_b           (1'b0),                                             // (terminated),                               
		.tx_dataout_valid_b (),                                                 // (terminated),                               
		.tx_vpid_byte1      (32'b00000000000000000000000000000000),             // (terminated),                               
		.tx_vpid_byte2      (32'b00000000000000000000000000000000),             // (terminated),                               
		.tx_vpid_byte3      (32'b00000000000000000000000000000000),             // (terminated),                               
		.tx_vpid_byte4      (32'b00000000000000000000000000000000),             // (terminated),                               
		.tx_vpid_byte1_b    (32'b00000000000000000000000000000000),             // (terminated),                               
		.tx_vpid_byte2_b    (32'b00000000000000000000000000000000),             // (terminated),                               
		.tx_vpid_byte3_b    (32'b00000000000000000000000000000000),             // (terminated),                               
		.tx_vpid_byte4_b    (32'b00000000000000000000000000000000),             // (terminated),                               
		.tx_line_f0         (44'b00000000000000000000000000000000000000000000), // (terminated),                               
		.tx_line_f1         (44'b00000000000000000000000000000000000000000000), // (terminated),                               
		.tx_dataout_b       ()                                                  // (terminated),                               
	);

	sdi_ii_tx_phy_mgmt #(
		.VIDEO_STANDARD ("mr"),
		.SD_BIT_WIDTH   (10)
	) u_tx_phy_mgmt (
		.tx_pclk            (tx_pclk),                                   //   input,   width = 1,          tx_pclk.clk
		.tx_rst             (rst_controller_reset_out_reset),            //   input,   width = 1,           tx_rst.reset
		.tx_std             (u_tx_protocol_tx_std_out_export),           //   input,   width = 3,           tx_std.export
		.tx_datain_valid    (u_tx_protocol_tx_dataout_valid_export),     //   input,   width = 1,  tx_datain_valid.export
		.tx_dataout_valid   (tx_dataout_valid),                          //  output,   width = 1, tx_dataout_valid.export
		.tx_datain          (u_tx_protocol_tx_dataout_tx_parallel_data), //   input,  width = 80,        tx_datain.tx_parallel_data
		.xcvr_tx_dataout    (tx_dataout),                                //  output,  width = 80,  xcvr_tx_dataout.tx_parallel_data
		.tx_datain_valid_b  (1'b0),                                      // (terminated),                               
		.tx_dataout_valid_b (),                                          // (terminated),                               
		.tx_datain_b        (20'b00000000000000000000),                  // (terminated),                               
		.xcvr_tx_dataout_b  ()                                           // (terminated),                               
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (1),
		.OUTPUT_RESET_SYNC_EDGES   ("deassert"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (0),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller (
		.reset_in0      (tx_rst),                         //   input,  width = 1, reset_in0.reset
		.clk            (tx_pclk),                        //   input,  width = 1,       clk.clk
		.reset_out      (rst_controller_reset_out_reset), //  output,  width = 1, reset_out.reset
		.reset_req      (),                               // (terminated),                       
		.reset_req_in0  (1'b0),                           // (terminated),                       
		.reset_in1      (1'b0),                           // (terminated),                       
		.reset_req_in1  (1'b0),                           // (terminated),                       
		.reset_in2      (1'b0),                           // (terminated),                       
		.reset_req_in2  (1'b0),                           // (terminated),                       
		.reset_in3      (1'b0),                           // (terminated),                       
		.reset_req_in3  (1'b0),                           // (terminated),                       
		.reset_in4      (1'b0),                           // (terminated),                       
		.reset_req_in4  (1'b0),                           // (terminated),                       
		.reset_in5      (1'b0),                           // (terminated),                       
		.reset_req_in5  (1'b0),                           // (terminated),                       
		.reset_in6      (1'b0),                           // (terminated),                       
		.reset_req_in6  (1'b0),                           // (terminated),                       
		.reset_in7      (1'b0),                           // (terminated),                       
		.reset_req_in7  (1'b0),                           // (terminated),                       
		.reset_in8      (1'b0),                           // (terminated),                       
		.reset_req_in8  (1'b0),                           // (terminated),                       
		.reset_in9      (1'b0),                           // (terminated),                       
		.reset_req_in9  (1'b0),                           // (terminated),                       
		.reset_in10     (1'b0),                           // (terminated),                       
		.reset_req_in10 (1'b0),                           // (terminated),                       
		.reset_in11     (1'b0),                           // (terminated),                       
		.reset_req_in11 (1'b0),                           // (terminated),                       
		.reset_in12     (1'b0),                           // (terminated),                       
		.reset_req_in12 (1'b0),                           // (terminated),                       
		.reset_in13     (1'b0),                           // (terminated),                       
		.reset_req_in13 (1'b0),                           // (terminated),                       
		.reset_in14     (1'b0),                           // (terminated),                       
		.reset_req_in14 (1'b0),                           // (terminated),                       
		.reset_in15     (1'b0),                           // (terminated),                       
		.reset_req_in15 (1'b0)                            // (terminated),                       
	);

endmodule
